create or replace PROCEDURE CLAIM_PAYOUT_APPROVE
(
 PAYOUTID IN NUMBER,
 BENEFIARYPAYMENTID IN VARCHAR,
 ANNUITYCHALLANNO IN VARCHAR  := NULL,
 CGSTRATE IN VARCHAR  := NULL,
 SGSTRATE IN VARCHAR  := NULL, 
 IGSTRATE IN VARCHAR  := NULL,
 UTGSTRATE IN VARCHAR  := NULL, 
 PRODUCTCODE IN VARCHAR,
 VARIANTCODE IN VARCHAR,
 ICODEVARIANT IN VARCHAR,
 CGSTAMOUNT IN VARCHAR2 := NULL,
 IGSTAMOUNT IN VARCHAR2 := NULL,
 SGSTAMOUNT IN VARCHAR2 := NULL,
 UTGSTAMOUNT IN VARCHAR2 := NULL,
 FROMSTATECODE IN VARCHAR2 :=NULL,
 TOSTATECODE IN VARCHAR2 :=NULL,
 CRSRACCN IN NUMBER,
 DRSRACCN IN NUMBER,
 ICODEFORLOBANNUITY IN NUMBER,
 ICODEFORPRODUCTLINEANNUITY IN NUMBER,
 ICODEFORVARIENTANNUITY IN VARCHAR2, 
 ICODEFORBUSINESSTYPEANNUITY IN NUMBER,
 ICODEFORPARTICIPATINGTYPEANNUITY IN NUMBER,
 ICODEFORBUSINESSSEGMENTANNUITY IN NUMBER,
 ICODEFORINVESTMENTPORTFOLIOANNUITY IN NUMBER,
 ISMULTIPLEBENEFICIARY IN VARCHAR2 :=NULL,
 PRODUCTCODEANNUITY  IN VARCHAR  := NULL,
 VARIANTCODEANNUITY IN VARCHAR  := NULL,
 SA_OUT_JOURNAL_NO OUT NOCOPY NUMBER,
 SA_OUT_DEBITACCOUNT OUT NOCOPY NUMBER,
 SA_OUT_PAYMENTCREDITACCOUNT OUT NOCOPY NUMBER,
 SA_OUT_TDSCREDITACCOUNT OUT NOCOPY NUMBER,
 SA_OUT_TOTALAMOUNT OUT NOCOPY NUMBER,
 SA_OUT_PAYMENTAMOUNT OUT NOCOPY NUMBER,
 SA_OUT_TdsAMOUNT OUT NOCOPY NUMBER,
 SA_OUT_CREDITICODE OUT NOCOPY VARCHAR2,
 SA_OUT_DEBITICODE OUT NOCOPY VARCHAR2,
 SA_OUT_MESSAGE OUT NOCOPY VARCHAR2,
 SA_OUT_STATUS OUT NOCOPY VARCHAR2,
 SA_OUT_STATUSCODE OUT NOCOPY VARCHAR2,
 SA_SQLCODE OUT NOCOPY NUMBER,
 SA_SQLERROR_MESSAGE OUT NOCOPY VARCHAR2,
 SA_OUT_AN_JOURNAL_NO OUT NOCOPY NUMBER,
 SA_OUT_AN_CR_CODE  OUT NOCOPY VARCHAR2,
 SA_OUT_AN_GST_EXPENSE_CR_CODE  OUT NOCOPY VARCHAR2,
 SA_OUT_AN_DR_CODE  OUT NOCOPY VARCHAR2,
 SA_OUT_AN_GST_DR_CODE OUT NOCOPY VARCHAR2
)
IS

da licaccounting.sa_inpdata;

cursor c1 is select licaccounting.sa_inp_obj(
ACCOUNTRULECONTEXT,
REF_NO,
EFFECTIVE_DATE_OF_PAYMENT     ,
PAYOUT_SOURCE_MODULE          ,
BENEFICIARY_PAYMENT_ID        ,
PRODUCT_CODE                  ,
VARIANT_CODE                  ,
PAYMENT_AMOUNT                ,
OPERATING_UNIT                ,
OPERATING_UNIT_TYPE           ,
PAYMENT_MODE                  ,
POLICY_NUMBER                 ,
LINE_OF_BUSINESS              ,
PRODUCT                       ,
MPH_CODE                      ,
PRODUCT_VARIANT               ,
I_CODE_FOR_LOB                ,
I_CODE_FOR_PRODUCT_LINE       ,
I_CODE_FOR_VARIANT            ,
I_CODE_FOR_BUSINESS_TYPE      ,
I_CODE_FOR_PARTICIPATING_TYPE ,
I_CODE_FOR_BUSINESS_SEGMENT   ,
I_CODE_FOR_INVESTMENT_PORTFOLIO,
BENEFICIARY_NAME              ,
BENEFICIARY_BANK_NAME         ,
BENEFICIARY_BRANCH_IFSC       ,
BENEFICIARY_BRANCH_NAME       ,
BENEFICIARY_ACCOUNT_TYPE      ,
BENEFICIARY_ACCOUNT_NUMBER    ,
BENEFICIARY_LEI               ,
SENDER_LEI                    ,
UNIT_CODE                     ,
MEMBER_NUMBER                 ,
PAYMENT_CATEGORY              ,
PAYMENT_SUB_CATEGORY          ,
NRO_ACCOUNT                   ,
IBAN                          ,
REMARKS           ,ISTDSAPPLICABLE, PANNUMBER, PAYMENTAMOUNT, PAYMENTDUEDATE, TDSAMOUNT, TDSREMARKS, FINANCIALYEAR, MONTH, CUSTCODE, DOMAINBATCHNO, TDSPCT,intafundAmountDebit,
GSTexpenseAmount ,
rocannuityAmount ,
gstliabiltyAmount,isGSTPaidByLIC,ISGSTAPPLICABLE, TRANSACTIONTYPE, TRANSACTION_SUB_TYPE, GSTREFNO, GST_REF_TRANSACTION_NO, GST_TRANSACTION_TYPE, AMOUNT_WITH_TAX
, AMOUNT_WITHOUT_TAX, CESS_AMOUNT, TOTAL_GST_AMOUNT, GST_RATE, CGST_AMOUNT, CGST_RATE, IGST_AMOUNT, IGST_RATE, SGST_AMOUNT, SGST_RATE, UTGST_AMOUNT, UTGST_RATE, 
GST_APPLICABLE_TYPE, GST_TYPE, COLLECTION_ID, TO_GSTIN, FROM_GSTN, HSN_CODE, FROM_PAN, TO_PAN, NATURE_OF_TRANSACTION, MPH_NAME, MPH_ADDRESS, ENTRY_TYPE, GSTREMARKS,
OLD_INVOICE_DATE,from_state_code,to_state_code ,created_by ,DR_SR_ACCN,CR_SR_ACCN,
ICODEFORLOB_ANNUITY,ICODEFORPRODUCTLINE_ANNUITY,ICODEFORVARIENT_ANNUITY,ICODEFORBUSINESSTYPE_ANNUITY,
ICODEFORPARTICIPATINGTYPE_ANNUITY,ICODEFORBUSINESSSEGMENT_ANNUITY,ICODEFORINVESTMENTPORTFOLIO_ANNUITY,Ispriceappicable,
ISMULTIPLEBENEFICIARY,PRODUCT_CODE_ANNUITY,VARIANT_CODE_ANNUITY)
from(select
CASE
    WHEN py.MODE_OF_EXIT = 1 THEN 'Death Claim Payment Approval SA'
    WHEN py.MODE_OF_EXIT = 2 THEN 'Maturity OR Resignation Claim Payment Approval SA'
    WHEN py.MODE_OF_EXIT = 3 THEN 'Maturity OR Resignation Claim Payment Approval SA'
    WHEN py.MODE_OF_EXIT = 4 THEN 'Withdrawal Claim Payment Approval SA'
END ACCOUNTRULECONTEXT,
(select SUBSTR(onb.CLAIM_ONBOARD_NO, INSTR(onb.CLAIM_ONBOARD_NO, ' ') + 7) AS last_part FROM dual) ref_no,to_date(CURRENT_DATE,'yyyy-MM-dd') EFFECTIVE_DATE_OF_PAYMENT,'Superannuation' PAYOUT_SOURCE_MODULE,BENEFIARYPAYMENTID BENEFICIARY_PAYMENT_ID,PRODUCTCODE PRODUCT_CODE,VARIANTCODE VARIANT_CODE,
CASE
WHEN py.MODE_OF_EXIT = 4 THEN pycom.NET_AMT
ELSE pycom.COMMUTATION_AMT
END PAYMENT_AMOUNT,



py.UNIT_CODE OPERATING_UNIT,'UO' OPERATING_UNIT_TYPE,'N' PAYMENT_MODE,py.MASTER_POLICY_NO POLICY_NUMBER,py.LINE_OF_BUSINESS LINE_OF_BUSINESS,py.PRODUCT PRODUCT,py.MPH_CODE MPH_CODE,py.VARIANT PRODUCT_VARIANT,5 I_CODE_FOR_LOB,
--CASE 
--WHEN pycom.COMMUNITY_ID>0  THEN 11
--ELSE  0
--END I_CODE_FOR_PRODUCT_LINE,
CASE 
WHEN pycom.COMMUTATION_AMT>0  THEN 11
ELSE  0
END I_CODE_FOR_PRODUCT_LINE,
--CASE 
--WHEN pacal.ANNUITY_ID>0  AND py.VARIANT =38 AND py.PRODUCT =11 THEN '116'
--WHEN pacal.ANNUITY_ID>0  AND py.VARIANT = 38 AND py.PRODUCT <> 11 THEN '102'
--ELSE  ICODEVARIANT
--END I_CODE_FOR_VARIANT,
ICODEVARIANT I_CODE_FOR_VARIANT,

1 I_CODE_FOR_BUSINESS_TYPE,1 I_CODE_FOR_PARTICIPATING_TYPE
,1 I_CODE_FOR_BUSINESS_SEGMENT,0 I_CODE_FOR_INVESTMENT_PORTFOLIO,pm.FIRSTNAME BENEFICIARY_NAME,pbnk.BANK_NAME BENEFICIARY_BANK_NAME,pbnk.IFSC_CODE BENEFICIARY_BRANCH_IFSC,pbnk.BANK_BRANCH BENEFICIARY_BRANCH_NAME,'AC4' BENEFICIARY_ACCOUNT_TYPE,pbnk.ACCOUNT_NUMBER  BENEFICIARY_ACCOUNT_NUMBER,'' BENEFICIARY_LEI,'' SENDER_LEI,py.UNIT_CODE UNIT_CODE,pm.LIC_ID MEMBER_NUMBER,'PCM002' PAYMENT_CATEGORY,'o' PAYMENT_SUB_CATEGORY,'' NRO_ACCOUNT,'' IBAN,'' REMARKS,
CASE 
    WHEN pycom.TDS_APPLICABLE = 1 THEN 'YES'
    WHEN pycom.TDS_APPLICABLE = 0 THEN 'NO'
END isTDSapplicable,'SBNCJ12045' panNumber,pycom.NET_AMT paymentAmount,to_date(to_char(SYSDATE,'DD-MON-RR'),'DD-MON-RR') paymentDueDate,pycom.TDS_AMT tdsAmount
,'nocomment' tdsremarks,to_char(EXTRACT(YEAR FROM CURRENT_DATE)) financialYear,to_char(CURRENT_DATE, 'Mon') month,'10335' custCode,py.MASTER_POLICY_NO DOMAINBATCHNO,'20' TDSPCT,

pacal.PURCHASE_PRICE intafundAmountDebit,
 CASE
    WHEN pacal.GST_BORNE_BY = 2 OR pacal.GST_BORNE_BY = 3 THEN pacal.GST_AMOUNT
    WHEN pacal.GST_BORNE_BY = 1 THEN 0
 END GSTexpenseAmount, 
--pacal.GST_AMOUNT GSTexpenseAmount ,
CASE
    WHEN pacal.GST_BORNE_BY = 2 OR pacal.GST_BORNE_BY = 3 THEN pacal.PURCHASE_PRICE
    WHEN pacal.GST_BORNE_BY = 1 THEN ROUND(pacal.PURCHASE_PRICE - pacal.GST_AMOUNT)
END rocannuityAmount,
--pacal.NET_PURCHASE_PRICE  ,
pacal.GST_AMOUNT gstliabiltyAmount,
CASE
    WHEN pacal.GST_BORNE_BY = 2  OR pacal.GST_BORNE_BY = 3  THEN 'YES'
    WHEN pacal.GST_BORNE_BY = 1 THEN 'NO'
END isGSTPaidByLIC,
CASE
    WHEN pacal.IS_GST_APPLICABLE = 1 THEN 'YES'
    WHEN pacal.IS_GST_APPLICABLE = 0 THEN 'NO' 
END  isGSTapplicable,
'C' transactionType ,
'A' TRANSACTION_SUB_TYPE ,
--NULL gstRefNo ,
py.MASTER_POLICY_NO gstRefNo,
ANNUITYCHALLANNO GST_REF_TRANSACTION_NO ,
'DEBIT'  GST_TRANSACTION_TYPE ,

--pacal.GST_AMOUNT AMOUNT_WITH_TAX ,
--pacal.NET_PURCHASE_PRICE AMOUNT_WITHOUT_TAX ,
CASE
    WHEN pacal.GST_BORNE_BY = 1 THEN  pacal.PURCHASE_PRICE
    WHEN pacal.GST_BORNE_BY = 2 OR pacal.GST_BORNE_BY = 3 THEN (pacal.PURCHASE_PRICE + pacal.GST_AMOUNT)
END AMOUNT_WITH_TAX,
CASE
    WHEN pacal.GST_BORNE_BY = 1 THEN  pacal.PURCHASE_PRICE -pacal.GST_AMOUNT 
    WHEN pacal.GST_BORNE_BY = 2 OR pacal.GST_BORNE_BY = 3 THEN (pacal.PURCHASE_PRICE)
END AMOUNT_WITHOUT_TAX,
0 CESS_AMOUNT ,
pacal.GST_AMOUNT TOTAL_GST_AMOUNT,
--pacal.NET_PURCHASE_PRICE + pacal.GST_AMOUNT TOTAL_GST_AMOUNT ,
CASE
WHEN pacal.GST_RATE IS NOT NULL THEN pacal.GST_RATE * 100
ELSE 0
END GST_RATE ,
--0 CGST_AMOUNT ,
--0 CGST_RATE ,
--0 IGST_AMOUNT ,
--0 IGST_RATE ,
--0 SGST_AMOUNT ,
--0 SGST_RATE ,
--0 UTGST_AMOUNT ,
--0 UTGST_RATE ,
CGSTAMOUNT CGST_AMOUNT ,
CGSTRATE CGST_RATE ,
IGSTAMOUNT IGST_AMOUNT ,
IGSTRATE IGST_RATE ,
SGSTAMOUNT SGST_AMOUNT ,
SGSTRATE SGST_RATE ,
UTGSTAMOUNT UTGST_AMOUNT ,
UTGSTRATE UTGST_RATE ,
CASE
    WHEN pacal.IS_GST_APPLICABLE = 1 THEN 'Taxable'
    WHEN pacal.IS_GST_APPLICABLE = 0 THEN 'Exempted' 
END  GST_APPLICABLE_TYPE,
--NULL GST_APPLICABLE_TYPE ,
--NULL GST_TYPE ,
CASE
    WHEN pacal.IS_GST_APPLICABLE = 1 THEN 'GST'
    WHEN pacal.IS_GST_APPLICABLE = 0 THEN 'NO GST' 
END  GST_TYPE,
0 COLLECTION_ID ,
lmu.gstin  TO_GSTIN ,
CASE
    WHEN mm.gstin IS NOT NULL THEN mm.gstin
    ELSE NULL 
END  FROM_GSTN,
'997131' HSN_CODE ,
--NULL FROM_PAN ,
CASE
    WHEN mm.pan IS NOT NULL THEN mm.pan
    ELSE NULL
END  FROM_PAN,
lmu.pan TO_PAN,
'Pension Service' NATURE_OF_TRANSACTION ,
py.MPH_NAME MPH_NAME ,
ma.ADDRESS_LINE1||','||ma.ADDRESS_LINE1||','||ma.ADDRESS_LINE3 MPH_ADDRESS ,
--CASE
--     WHEN mm.gstin IS NOT NULL THEN 'B2B'
--ELSE 'B2C'
--END  ENTRY_TYPE,

'0'  ENTRY_TYPE,
NULL gstREMARKS ,
NULL OLD_INVOICE_DATE,
--CASE
--    WHEN lms.gststatecode IS NOT NULL THEN lms.gststatecode
--    ELSE substr(lmu.gstin,1,2)
--END  from_state_code,
0  from_state_code,
substr(lmu.gstin,1,2) to_state_code,
py.modified_by created_by,
--pycom.MARKET_VALUE_ADJUSTMENT  MVA_CHARGE,
--pycom.EXIT_LOAD EXIT_CHARGE,
DRSRACCN DR_SR_ACCN,
CRSRACCN CR_SR_ACCN,
ICODEFORLOBANNUITY  ICODEFORLOB_ANNUITY,
CASE 
WHEN pacal.ANNUITY_ID>0  THEN 10
ELSE 11 
END ICODEFORPRODUCTLINE_ANNUITY,
--ICODEFORPRODUCTLINEANNUITY ICODEFORPRODUCTLINE_ANNUITY,
CASE 
WHEN pacal.ANNUITY_ID>0  AND py.VARIANT =38 AND py.PRODUCT =11 THEN '116'
WHEN pacal.ANNUITY_ID>0  AND py.VARIANT = 38 AND py.PRODUCT <> 11 THEN '102'
ELSE  ICODEFORVARIENTANNUITY
END ICODEFORVARIENT_ANNUITY,
--ICODEFORVARIENTANNUITY ICODEFORVARIENT_ANNUITY,
ICODEFORBUSINESSTYPEANNUITY  ICODEFORBUSINESSTYPE_ANNUITY,
ICODEFORPARTICIPATINGTYPEANNUITY  ICODEFORPARTICIPATINGTYPE_ANNUITY,
ICODEFORBUSINESSSEGMENTANNUITY  ICODEFORBUSINESSSEGMENT_ANNUITY,
ICODEFORINVESTMENTPORTFOLIOANNUITY  ICODEFORINVESTMENTPORTFOLIO_ANNUITY,
CASE
WHEN  pycom.COMMUTATION_AMT > 0 AND  pacal.NET_PURCHASE_PRICE  IS NOT NULL THEN 'B'  
WHEN  pycom.COMMUTATION_AMT > 0 AND pacal.NET_PURCHASE_PRICE  IS NULL THEN 'C' 
WHEN pycom.COMMUTATION_AMT = 0 AND pacal.NET_PURCHASE_PRICE  IS NOT NULL THEN 'P' 
END Ispriceappicable,
'Y' ISMULTIPLEBENEFICIARY, 
PRODUCTCODEANNUITY PRODUCT_CODE_ANNUITY,
VARIANTCODEANNUITY VARIANT_CODE_ANNUITY

from TEMP_PAYOUT py
JOIN TEMP_PAYOUT_MBR pm ON py.PAYOUT_ID = pm.PAYOUT_ID
LEFT JOIN TEMP_PAYOUT_COMMUTATION pycom ON pycom.PAYOUT_MEMBER_ID = pm.MEMBER_ID
left JOIN TEMP_PAYOUT_PAYEE_BANK pbnk ON (pbnk.PAYOUT_MEMBER_ID = pm.MEMBER_ID and pycom.COMMUTATION_AMT>0 and pbnk.TYPE='COMMUTATION' and pbnk.is_active=1)
LEFT JOIN TEMP_PAYOUT_ANNUITY_CALC pacal ON pacal.PAYOUT_MEMBER_ID = pm.MEMBER_ID
LEFT JOIN TEMP_PAYOUT_FUND_VALUE pyfv ON pyfv.PAYOUT_MEMBER_ID = pm.MEMBER_ID
JOIN TEMP_CLAIM_ONBORADING onb ON onb.INTIMATION_NO = py.INTIMATION_NO
JOIN POLICY_MASTER pol on pol.policy_id=py.policy_id 
LEFT JOIN MPH_MASTER mm on mm.mph_id=pol.mph_id
LEFT JOIN MPH_ADDRESS ma on ma.mph_id=pol.mph_id
LEFT JOIN  liccommon.master_unit lmu on lmu.unit_code=pol.unit_id
--LEFT JOIN  liccommon.master_state lms on ma.state_id=lms.state_id
where py.PAYOUT_ID =PAYOUTID);



--P_OUT_JOURNAL_NO NUMBER;
-- P_OUT_DEBITACCOUNT NUMBER;
-- P_OUT_PAYMENTCREDITACCOUNT NUMBER;
-- P_OUT_TDSCREDITACCOUNT NUMBER;
-- P_OUT_TOTALAMOUNT NUMBER;
-- P_OUT_PAYMENTAMOUNT NUMBER;
-- P_OUT_TdsAMOUNT NUMBER;
-- P_OUT_CREDITICODE VARCHAR2(100);
-- P_OUT_DEBITICODE VARCHAR2(100);
-- P_OUT_MESSAGE VARCHAR2(4000);
-- P_OUT_STATUS VARCHAR2(100);
-- P_OUT_STATUSCODE VARCHAR2(100);
-- P_SQLCODE NUMBER;
-- P_SQLERROR_MESSAGE VARCHAR2(1000);
 var_t_sadata licaccounting.sa_out_data;
begin
open c1;
fetch c1 bulk collect  into da;
close c1;


LICACCOUNTING.SA_CLAIM_PAYOUT_APPROVE(da,var_t_sadata);


dbms_output.put_line('count '||var_t_sadata.count);
for  j in da.first.. var_t_sadata.last loop
dbms_output.put_line('Pm_OUT_DEBITACCOUNT '||var_t_sadata(j).P_OUT_DEBITACCOUNT);
dbms_output.put_line('P_OUT_TDSCREDITACCOUNT '||var_t_sadata(j).P_OUT_TDS_CREDITACCOUNT);
dbms_output.put_line('P_OUT_PAYMENTCREDITACCOUNT '||var_t_sadata(j).P_OUT_PAYMENT_CREDITACCOUNT);
dbms_output.put_line('P_OUT_PAYMENTAMOUNT '||var_t_sadata(j).P_OUT_PAYMENTAMOUNT);
dbms_output.put_line('P_OUT_tdsAMOUNT '||var_t_sadata(j).P_OUT_tdsAMOUNT);
--dbms_output.put_line('P_OUT_CREDITACCOUNT '||var_t_sadata(j).P_OUT_CREDITACCOUNT);
dbms_output.put_line('P_OUT_CREDITICODE '||var_t_sadata(j).P_OUT_CREDITICODE);
dbms_output.put_line('P_OUT_MESSAGE '||var_t_sadata(j).P_OUT_MESSAGE);
dbms_output.put_line('P_OUT_STATUSCODE '||var_t_sadata(j).P_OUT_STATUSCODE);
dbms_output.put_line('P_SQLCODE '||var_t_sadata(j).P_SQLCODE);
dbms_output.put_line('P_SQLCODE '||var_t_sadata(j).P_SQLERROR_MESSAGE);
dbms_output.put_line('AN_JOURNAL_NO '||var_t_sadata(j).AN_JOURNAL_NO);
dbms_output.put_line('AN_CR_CODE '||var_t_sadata(j).AN_CR_CODE);
dbms_output.put_line('AN_GST_EXPENSE_CR_CODE '||var_t_sadata(j).AN_GST_EXPENSE_CR_CODE);
dbms_output.put_line('AN_DR_CODE '||var_t_sadata(j).AN_DR_CODE);
dbms_output.put_line('AN_GST_DR_CODE '||var_t_sadata(j).AN_GST_DR_CODE);

 SA_OUT_JOURNAL_NO := var_t_sadata(j).P_OUT_JOURNAL_NO;
 SA_OUT_DEBITACCOUNT := var_t_sadata(j).P_OUT_DEBITACCOUNT;
 SA_OUT_PAYMENTCREDITACCOUNT := var_t_sadata(j).P_OUT_PAYMENT_CREDITACCOUNT;
 SA_OUT_TDSCREDITACCOUNT := var_t_sadata(j).P_OUT_TDS_CREDITACCOUNT;
 SA_OUT_TOTALAMOUNT := var_t_sadata(j).P_OUT_TOTALAMOUNT;
 SA_OUT_PAYMENTAMOUNT := var_t_sadata(j).P_OUT_PAYMENTAMOUNT;
 SA_OUT_TdsAMOUNT := var_t_sadata(j).P_OUT_TdsAMOUNT;
 SA_OUT_CREDITICODE := var_t_sadata(j).P_OUT_CREDITICODE;
 SA_OUT_DEBITICODE := var_t_sadata(j).P_OUT_DEBITICODE;
 SA_OUT_MESSAGE := var_t_sadata(j).P_OUT_MESSAGE;
 SA_OUT_STATUS := var_t_sadata(j).P_OUT_STATUS;
 SA_OUT_STATUSCODE := var_t_sadata(j).P_OUT_STATUSCODE;
 SA_SQLCODE := var_t_sadata(j).P_SQLCODE;
 SA_SQLERROR_MESSAGE := var_t_sadata(j).P_SQLERROR_MESSAGE;
 SA_OUT_AN_JOURNAL_NO:=var_t_sadata(j).AN_JOURNAL_NO;
 SA_OUT_AN_CR_CODE :=var_t_sadata(j).AN_CR_CODE;
 SA_OUT_AN_GST_EXPENSE_CR_CODE :=var_t_sadata(j).AN_GST_EXPENSE_CR_CODE;
 SA_OUT_AN_DR_CODE  :=var_t_sadata(j).AN_DR_CODE;
 SA_OUT_AN_GST_DR_CODE :=var_t_sadata(j).AN_GST_DR_CODE;

end loop;










dbms_output.put_line('count '||var_t_sadata.count);
for  i in var_t_sadata.first.. var_t_sadata.last loop
INSERT INTO ABC('id','name','details')(var_t_sadata(i).P_OUT_DEBITACCOUNT, 
dbms_output.put_line('Pm_OUT_DEBITACCOUNT '||var_t_sadata(i).P_OUT_DEBITACCOUNT);
dbms_output.put_line('P_OUT_TDSCREDITACCOUNT '||var_t_sadata(i).P_OUT_TDS_CREDITACCOUNT);
dbms_output.put_line('P_OUT_PAYMENTCREDITACCOUNT '||var_t_sadata(i).P_OUT_PAYMENT_CREDITACCOUNT);
dbms_output.put_line('P_OUT_PAYMENTAMOUNT '||var_t_sadata(i).P_OUT_PAYMENTAMOUNT);
dbms_output.put_line('P_OUT_tdsAMOUNT '||var_t_sadata(i).P_OUT_tdsAMOUNT);
--dbms_output.put_line('P_OUT_CREDITACCOUNT '||var_t_sadata(i).P_OUT_CREDITACCOUNT);
dbms_output.put_line('P_OUT_CREDITICODE '||var_t_sadata(i).P_OUT_CREDITICODE);
dbms_output.put_line('P_OUT_MESSAGE '||var_t_sadata(i).P_OUT_MESSAGE);
dbms_output.put_line('P_OUT_STATUSCODE '||var_t_sadata(i).P_OUT_STATUSCODE);
dbms_output.put_line('P_SQLCODE '||var_t_sadata(i).P_SQLCODE);
dbms_output.put_line('P_SQLCODE '||var_t_sadata(i).P_SQLERROR_MESSAGE);
dbms_output.put_line('AN_JOURNAL_NO '||var_t_sadata(i).AN_JOURNAL_NO);
dbms_output.put_line('AN_CR_CODE '||var_t_sadata(i).AN_CR_CODE);
dbms_output.put_line('AN_GST_EXPENSE_CR_CODE '||var_t_sadata(i).AN_GST_EXPENSE_CR_CODE);
dbms_output.put_line('AN_DR_CODE '||var_t_sadata(i).AN_DR_CODE);
dbms_output.put_line('AN_GST_DR_CODE '||var_t_sadata(i).AN_GST_DR_CODE);

 SA_OUT_JOURNAL_NO := var_t_sadata(i).P_OUT_JOURNAL_NO;
 SA_OUT_DEBITACCOUNT := var_t_sadata(i).P_OUT_DEBITACCOUNT;
 SA_OUT_PAYMENTCREDITACCOUNT := var_t_sadata(i).P_OUT_PAYMENT_CREDITACCOUNT;
 SA_OUT_TDSCREDITACCOUNT := var_t_sadata(i).P_OUT_TDS_CREDITACCOUNT;
 SA_OUT_TOTALAMOUNT := var_t_sadata(i).P_OUT_TOTALAMOUNT;
 SA_OUT_PAYMENTAMOUNT := var_t_sadata(i).P_OUT_PAYMENTAMOUNT;
 SA_OUT_TdsAMOUNT := var_t_sadata(i).P_OUT_TdsAMOUNT;
 SA_OUT_CREDITICODE := var_t_sadata(i).P_OUT_CREDITICODE;
 SA_OUT_DEBITICODE := var_t_sadata(i).P_OUT_DEBITICODE;
 SA_OUT_MESSAGE := var_t_sadata(i).P_OUT_MESSAGE;
 SA_OUT_STATUS := var_t_sadata(i).P_OUT_STATUS;
 SA_OUT_STATUSCODE := var_t_sadata(i).P_OUT_STATUSCODE;
 SA_SQLCODE := var_t_sadata(i).P_SQLCODE;
 SA_SQLERROR_MESSAGE := var_t_sadata(i).P_SQLERROR_MESSAGE;
 SA_OUT_AN_JOURNAL_NO:=var_t_sadata(i).AN_JOURNAL_NO;
 SA_OUT_AN_CR_CODE :=var_t_sadata(i).AN_CR_CODE;
 SA_OUT_AN_GST_EXPENSE_CR_CODE :=var_t_sadata(i).AN_GST_EXPENSE_CR_CODE;
 SA_OUT_AN_DR_CODE  :=var_t_sadata(i).AN_DR_CODE;
 SA_OUT_AN_GST_DR_CODE :=var_t_sadata(i).AN_GST_DR_CODE;

end loop;



--insert into req_resp values ()


END CLAIM_PAYOUT_APPROVE;